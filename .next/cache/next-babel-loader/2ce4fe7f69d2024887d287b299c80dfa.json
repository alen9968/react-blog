{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport fetch from 'isomorphic-unfetch';\nimport { message } from 'antd';\nimport queryString from 'query-string';\nimport localStorage from 'localStorage';\nconst dns = {\n  API_ROOT: '',\n  API_ROOT_LOCAL: 'http://localhost:8094',\n  REMOTE_HOSTS: ['http://server.dreamma.vip']\n};\nconst R = {\n  authorization: null,\n  authorizationKey: 'Token',\n\n  getAuthorization() {\n    R.authorization = localStorage.getItem(R.authorizationKey);\n    return R.authorization;\n  },\n\n  setAuthorization(s) {\n    console.info(s);\n    R.authorization = s;\n    localStorage.setItem(R.authorizationKey, s);\n    return s;\n  },\n\n  removeAuthorization() {\n    localStorage.removeItem(R.authorizationKey);\n  },\n\n  headers() {\n    return {\n      Authorization: R.getAuthorization(),\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    };\n  },\n\n  async testApiRoot(rootUrl) {\n    const response = await fetch(`${rootUrl}/ping`);\n    const {\n      ok,\n      status\n    } = response;\n\n    if (ok && status === 200) {\n      return response.text().then(text => {\n        if (text === 'pong') {\n          return rootUrl;\n        }\n\n        return _Promise.reject();\n      });\n    }\n\n    return _Promise.reject(new Error(`ok: ${ok}, status: ${status}`));\n  },\n\n  getApiRoot() {\n    if (localStorage.getItem('resolveByLocal') === 'true') {\n      return R.setApiRoot(dns.API_ROOT_LOCAL);\n    } //localhost 不需要ping\n\n\n    return _Promise.race(dns.REMOTE_HOSTS.map(R.testApiRoot)).then(R.setApiRoot).catch(error => {\n      const msg = `Failed to ping any remote: ${error}`;\n      message.error(msg);\n      return _Promise.reject(new Error(msg));\n    });\n  },\n\n  async setApiRoot(newApiRoot) {\n    dns.API_ROOT = newApiRoot;\n    localStorage.setItem('API_ROOT', newApiRoot);\n    return newApiRoot;\n  },\n\n  delete(path, data) {\n    R.getAuthorization();\n    return fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'DELETE',\n      body: _JSON$stringify(R.body(data)),\n      headers: R.headers()\n    });\n  },\n\n  body(data) {\n    return _objectSpread({}, data);\n  },\n\n  async parseResponse(res) {\n    const authorization = res.headers.get('Authorization'); //去除response header 里面的token,只有第一次sign_in 里面才有\n\n    console.info('parseResponse:', authorization);\n\n    if (authorization) {\n      console.info(authorization);\n      R.setAuthorization(authorization);\n    }\n\n    console.info('Confirm parseResponse:', R.getAuthorization()); //res.headers.forEach((v,k)=>console.log(k,v))\n    //localStorage.setItem(R.authorizationKey, authorization)\n\n    const json = await res.json();\n\n    if (res.status >= 400) {\n      json.status = res.status;\n    }\n\n    if (res.status === 401) {\n      R.setAuthorization('401');\n    }\n\n    return json;\n  },\n\n  async get(path, data = {}, root = null) {\n    //R.getAuthorization()\n    const params = R.body(data);\n    const query = queryString.stringify(params);\n    console.info(`${root || dns.API_ROOT}/${path}?${query}`);\n    const res = await fetch(`${root || dns.API_ROOT}/${path}?${query}`, {\n      method: 'GET',\n      headers: R.headers()\n    });\n    const authorization = res.headers.get('Authorization');\n    console.info(authorization);\n    const content = await R.parseResponse(res);\n    return content;\n  },\n\n  async patch(path, data) {\n    R.getAuthorization();\n    const res = await fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'PATCH',\n      headers: R.headers(),\n      body: _JSON$stringify(R.body(data))\n    });\n    const content = await R.parseResponse(res);\n    return content;\n  },\n\n  async post(path, data) {\n    R.getAuthorization();\n    const res = await fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'POST',\n      headers: R.headers(),\n      body: _JSON$stringify(R.body(data))\n    });\n    const content = await R.parseResponse(res);\n    console.info(content);\n    return content; //返回一个Promise 给login界面\n  },\n\n  async put(path, data) {\n    R.getAuthorization();\n    const res = await fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'PUT',\n      headers: R.headers(),\n      body: _JSON$stringify(R.body(data))\n    });\n    const content = await R.parseResponse(res);\n    return content;\n  }\n\n};\nexport default R;","map":{"version":3,"sources":["/Users/zhangxuecai/Projects/react-blog/utils/request.js"],"names":["fetch","message","queryString","localStorage","dns","API_ROOT","API_ROOT_LOCAL","REMOTE_HOSTS","R","authorization","authorizationKey","getAuthorization","getItem","setAuthorization","s","console","info","setItem","removeAuthorization","removeItem","headers","Authorization","Accept","testApiRoot","rootUrl","response","ok","status","text","then","reject","Error","getApiRoot","setApiRoot","race","map","catch","error","msg","newApiRoot","delete","path","data","method","body","parseResponse","res","get","json","root","params","query","stringify","content","patch","post","put"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { message } from 'antd'\nimport queryString from 'query-string'\nimport localStorage from 'localStorage'\nconst dns = {\n  API_ROOT: '',\n  API_ROOT_LOCAL: 'http://localhost:8094',\n  REMOTE_HOSTS: ['http://server.dreamma.vip'],\n}\n\nconst R = {\n  authorization: null,\n  authorizationKey: 'Token',\n\n  getAuthorization() {\n    R.authorization = localStorage.getItem(R.authorizationKey)\n    return R.authorization\n  },\n\n  setAuthorization(s) {\n    console.info(s)\n    R.authorization = s\n    localStorage.setItem(R.authorizationKey, s)\n    return s\n  },\n\n  removeAuthorization() {\n    localStorage.removeItem(R.authorizationKey)\n  },\n\n  headers() {\n    return {\n      Authorization: R.getAuthorization(),\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  },\n\n  async testApiRoot(rootUrl) {\n    const response = await fetch(`${rootUrl}/ping`)\n    const { ok, status } = response\n    if (ok && status === 200) {\n      return response.text().then(text => {\n        if (text === 'pong') {\n          return rootUrl\n        }\n        return Promise.reject()\n      })\n    }\n    return Promise.reject(new Error(`ok: ${ok}, status: ${status}`))\n  },\n\n  getApiRoot() {\n    if (localStorage.getItem('resolveByLocal') === 'true') {\n      return R.setApiRoot(dns.API_ROOT_LOCAL)\n    }//localhost 不需要ping\n    return Promise.race(dns.REMOTE_HOSTS.map(R.testApiRoot))\n      .then(R.setApiRoot)\n      .catch(error => {\n        const msg = `Failed to ping any remote: ${error}`\n        message.error(msg)\n        return Promise.reject(new Error(msg))\n      })\n  },\n\n  async setApiRoot(newApiRoot) {\n    dns.API_ROOT = newApiRoot\n    localStorage.setItem('API_ROOT', newApiRoot)\n    return newApiRoot\n  },\n\n\n  delete(path, data) {\n    R.getAuthorization()\n    return fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'DELETE',\n      body: JSON.stringify(R.body(data)),\n      headers: R.headers()\n    })\n  },\n\n  body(data) {\n    return {\n      //ORIGIN: global.location.origin,\n      //DEVICE_TYPE,\n      // locale: global.LANGUAGE,\n      ...data\n    }\n  },\n\n  async parseResponse(res) {\n    const authorization = res.headers.get('Authorization')\n    //去除response header 里面的token,只有第一次sign_in 里面才有\n    console.info('parseResponse:', authorization )\n    if (authorization) {\n      console.info(authorization)\n      R.setAuthorization(authorization)\n    }\n    console.info('Confirm parseResponse:', R.getAuthorization())\n    //res.headers.forEach((v,k)=>console.log(k,v))\n    //localStorage.setItem(R.authorizationKey, authorization)\n\n    const json = await res.json()\n    if (res.status >= 400) {\n      json.status = res.status\n    }\n    if (res.status === 401) {\n      R.setAuthorization('401')\n    }\n    return json\n  },\n\n  async get(path, data = {}, root = null) {\n    //R.getAuthorization()\n    const params = R.body(data)\n    const query = queryString.stringify(params)\n    console.info(`${root || dns.API_ROOT}/${path}?${query}`)\n    const res = await fetch(`${root || dns.API_ROOT}/${path}?${query}`, {\n      method: 'GET',\n      headers: R.headers()\n    })\n    const authorization = res.headers.get('Authorization')\n    console.info(authorization )\n    const content = await R.parseResponse(res)\n    return content\n  },\n\n  async patch(path, data) {\n    R.getAuthorization()\n    const res = await fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'PATCH',\n      headers: R.headers(),\n      body: JSON.stringify(R.body(data))\n    })\n    const content = await R.parseResponse(res)\n    return content\n  },\n\n  async post(path, data) {\n    R.getAuthorization()\n    const res = await fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'POST',\n      headers: R.headers(),\n      body: JSON.stringify(R.body(data))\n    })\n    const content = await R.parseResponse(res)\n    console.info(content )\n    return content //返回一个Promise 给login界面\n  },\n\n  async put(path, data) {\n    R.getAuthorization()\n    const res = await fetch(`${dns.API_ROOT}/${path}`, {\n      method: 'PUT',\n      headers: R.headers(),\n      body: JSON.stringify(R.body(data))\n    })\n\n    const content = await R.parseResponse(res)\n    return content\n  }\n}\n\nexport default R\n"]},"metadata":{},"sourceType":"module"}