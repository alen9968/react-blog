{"ast":null,"code":"import { Map } from 'immutable';\nimport immutableHandler from '../immutableHandler';\nexport var ARTICLES_SET = 'ARTICLES_SET';\nexport var ARTICLES_SET_IN = 'ARTICLES_SET_IN';\nexport var ARTICLE_SET = 'ARTICLE_SET';\nexport var ARTICLES_MERGE = 'ARTICLES_MERGE';\nexport default immutableHandler(function () {\n  var articles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Map({});\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var id = action.id,\n      value = action.value,\n      path = action.path;\n\n  switch (action.type) {\n    case ARTICLES_SET:\n      return value;\n\n    case ARTICLE_SET:\n      return articles.set(id, value);\n\n    case ARTICLES_MERGE:\n      return articles.mergeDeep(value);\n\n    case ARTICLES_SET_IN:\n      return articles.setIn(path, value);\n\n    default:\n      return articles;\n  }\n});\nexport var articlesSet = function articlesSet(value) {\n  return {\n    type: ARTICLES_SET,\n    value: value\n  };\n};\nexport var articleSet = function articleSet(id, value) {\n  return {\n    type: ARTICLE_SET,\n    id: id,\n    value: value\n  };\n};\nexport var articlesSetIn = function articlesSetIn(path, value) {\n  return {\n    type: ARTICLES_SET_IN,\n    path: path,\n    value: value\n  };\n};\nexport var articlesMerge = function articlesMerge(value) {\n  return {\n    type: ARTICLES_MERGE,\n    value: value\n  };\n};","map":{"version":3,"sources":["/Users/zhangxuecai/Projects/react-blog/redux/modules/articles.js"],"names":["Map","immutableHandler","ARTICLES_SET","ARTICLES_SET_IN","ARTICLE_SET","ARTICLES_MERGE","articles","action","id","value","path","type","set","mergeDeep","setIn","articlesSet","articleSet","articlesSetIn","articlesMerge"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAEA,OAAO,IAAMC,YAAY,GAAG,cAArB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,eAAeJ,gBAAgB,CAAC,YAAgC;AAAA,MAA/BK,QAA+B,uEAApBN,GAAG,CAAC,EAAD,CAAiB;AAAA,MAAXO,MAAW;AAAA,MACtDC,EADsD,GAClCD,MADkC,CACtDC,EADsD;AAAA,MAClDC,KADkD,GAClCF,MADkC,CAClDE,KADkD;AAAA,MAC3CC,IAD2C,GAClCH,MADkC,CAC3CG,IAD2C;;AAE9D,UAAQH,MAAM,CAACI,IAAf;AACE,SAAKT,YAAL;AACE,aAAOO,KAAP;;AACF,SAAKL,WAAL;AACE,aAAOE,QAAQ,CAACM,GAAT,CAAaJ,EAAb,EAAiBC,KAAjB,CAAP;;AACF,SAAKJ,cAAL;AACE,aAAOC,QAAQ,CAACO,SAAT,CAAmBJ,KAAnB,CAAP;;AACF,SAAKN,eAAL;AACE,aAAOG,QAAQ,CAACQ,KAAT,CAAeJ,IAAf,EAAqBD,KAArB,CAAP;;AACF;AACE,aAAOH,QAAP;AAVJ;AAYD,CAd8B,CAA/B;AAgBA,OAAO,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAAAN,KAAK;AAAA,SAAK;AAAEE,IAAAA,IAAI,EAAET,YAAR;AAAsBO,IAAAA,KAAK,EAALA;AAAtB,GAAL;AAAA,CAAzB;AACP,OAAO,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACR,EAAD,EAAKC,KAAL;AAAA,SAAgB;AAAEE,IAAAA,IAAI,EAAEP,WAAR;AAAqBI,IAAAA,EAAE,EAAFA,EAArB;AAAyBC,IAAAA,KAAK,EAALA;AAAzB,GAAhB;AAAA,CAAnB;AACP,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACP,IAAD,EAAOD,KAAP;AAAA,SAAkB;AAC7CE,IAAAA,IAAI,EAAER,eADuC;AAE7CO,IAAAA,IAAI,EAAJA,IAF6C;AAG7CD,IAAAA,KAAK,EAALA;AAH6C,GAAlB;AAAA,CAAtB;AAKP,OAAO,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAAAT,KAAK;AAAA,SAAK;AAAEE,IAAAA,IAAI,EAAEN,cAAR;AAAwBI,IAAAA,KAAK,EAALA;AAAxB,GAAL;AAAA,CAA3B","sourcesContent":["import { Map } from 'immutable'\nimport immutableHandler from '../immutableHandler'\n\nexport const ARTICLES_SET = 'ARTICLES_SET'\nexport const ARTICLES_SET_IN = 'ARTICLES_SET_IN'\nexport const ARTICLE_SET = 'ARTICLE_SET'\nexport const ARTICLES_MERGE = 'ARTICLES_MERGE'\n\nexport default immutableHandler((articles = Map({}), action) => {\n  const { id, value, path } = action\n  switch (action.type) {\n    case ARTICLES_SET:\n      return value\n    case ARTICLE_SET:\n      return articles.set(id, value)\n    case ARTICLES_MERGE:\n      return articles.mergeDeep(value)\n    case ARTICLES_SET_IN:\n      return articles.setIn(path, value)\n    default:\n      return articles\n  }\n})\n\nexport const articlesSet = value => ({ type: ARTICLES_SET, value })\nexport const articleSet = (id, value) => ({ type: ARTICLE_SET, id, value })\nexport const articlesSetIn = (path, value) => ({\n  type: ARTICLES_SET_IN,\n  path,\n  value\n})\nexport const articlesMerge = value => ({ type: ARTICLES_MERGE, value })\n"]},"metadata":{},"sourceType":"module"}